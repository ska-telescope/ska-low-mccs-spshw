# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.

image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - deploy
  - integration
  - staging
  - test
  - test-psi-low
  - test-ral-low
  - publish
  - pages
  - scan

include:
  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

  # Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # k8s
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

  # xray -- not importing template for now, because it comes with unwanted rules
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'

  # Deploy stage
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.gitlab-ci.yml'

deploy-staging:
  when: manual

deploy-integration:
  when: manual

psi-low-k8s-test:
  stage: test-psi-low
  when: manual
  tags:
    - k8srunner-psi-low
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    on_stop: psi-low-stop-k8s
    auto_stop_in: 1 minute
  variables:
    TANGO_HOST: "tango-databaseds.$KUBE_NAMESPACE:10000"
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    K8S_HELMFILE_ENV: psi-low
    STATION_LABEL: psi-low
    PASS_PROXY_CONFIG: "yes"
    JUNITXML_REPORT_PATH: build/reports/psi-low-functional-tests.xml
    CUCUMBER_JSON_PATH: build/reports/psi-low-cucumber.json
    JSON_REPORT_PATH: build/reports/report.json
  before_script:
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always

psi-low-xray-publish:
  stage: test-psi-low
  needs:
    - psi-low-k8s-test
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    TEST_ENV: PSI-LOW
    REALHW_OR_SIMULATED: real
    XRAY_TEST_RESULT_FILE: build/reports/psi-low-cucumber.json
  script:
    - make xray-publish
  allow_failure: true

psi-low-stop-k8s:
  stage: test-psi-low
  needs:
    - psi-low-k8s-test
  tags:
    - k8srunner-psi-low
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    action: stop
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  allow_failure: true

ral-low-k8s-test:
  stage: test-ral-low
  extends: k8s-test
  when: manual
  needs:
    - oci-image-build
  tags:
    - k8srunner-stfc-ral
  environment:
    name: test-ral-low/$CI_COMMIT_REF_SLUG
    on_stop: ral-low-stop-k8s
    auto_stop_in: 1 minute
  variables:
    TANGO_HOST: "databaseds.skaffold.svc.stfc-ral-k8s.skao.int:10000"
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    K8S_HELMFILE_ENV: ral-software
    STATION_LABEL: stfc-ral-software
    JUNITXML_REPORT_PATH: build/reports/ral-low-functional-tests.xml
    CUCUMBER_JSON_PATH: build/reports/ral-low-cucumber.json
    JSON_REPORT_PATH: build/reports/report.json
    HW_DEPLOYMENT: true
  before_script:
    - export KUBECONFIG=~/.kube/config  # Not sure why this is not default
    - make k8s-install-chart
    - make k8s-wait
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always

ral-low-xray-publish:
  stage: test-ral-low
  when: manual
  needs:
    - ral-low-k8s-test
  tags:
    - k8srunner-stfc-ral
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    TEST_ENV: STFC-RAL
    REALHW_OR_SIMULATED: real
    XRAY_TEST_RESULT_FILE: build/reports/ral-low-cucumber.json
  script:
    - pip install -U ska-ser-xray --extra-index-url "https://artefact.skao.int/repository/pypi-internal/simple"
    - make xray-publish
  allow_failure: true

ral-low-stop-k8s:
  stage: test-ral-low
  needs:
    - ral-low-k8s-test
  tags:
    - k8srunner-stfc-ral
  environment:
    name: test-ral-low/$CI_COMMIT_REF_SLUG
    action: stop
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - export KUBECONFIG=~/.kube/config  # Not sure why this is not default
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace

helmfile-lint:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: lint
  tags:
    - ska-default
  script:
    - make helmfile-lint
