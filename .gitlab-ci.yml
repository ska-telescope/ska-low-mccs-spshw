# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.

image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build
    
# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - test
  - test-psi-low
  - publish
  - pages
  - scan
  - .post
  - test-psi-low

include:
  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

  # Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # k8s
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

python-test:
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.32

python-lint:
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.32

k8s-test-psi-low:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test-psi-low
  tags:
    - k8srunner-psi-low
  variables:
    TANGO_HOST: "tango-databaseds.$KUBE_NAMESPACE:10000"
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    K8S_FACILITY: psi-low
    PASS_PROXY_CONFIG: "yes"
  before_script:
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always
  when: manual
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test-psi-low
    auto_stop_in: 1 minute

stop-k8s-test-psi-low:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  stage: test-psi-low
  tags:
    - k8srunner-psi-low
  when: manual
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    action: stop
