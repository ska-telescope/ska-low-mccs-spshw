# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.

image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

default:
  tags:
  - ska-k8s

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build
    
# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - test
  - test-psi-low
  - publish
  - pages
  - scan

include:
  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

  # Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # k8s
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

  # xray -- not importing template for now, because it comes with unwanted rules
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'


.image_builder_template:
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  tags:
    - ska-default
  before_script:
    - '[ -f .make/oci.mk ] || (echo "File oci.mk not included in Makefile; exit 1")'
    - 'make help | grep oci-build-all'
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - mkdir -p build
  script:
    - make oci-build-all CAR_OCI_REGISTRY_HOST=${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
  artifacts:
    paths:
      - build/

oci-image-build:
  extends:
    - .image_builder_template
  stage: build
  timeout: 1h
  rules:
    - exists:
        - Dockerfile
        - images/**/*


test:
  timeout: 1h
  stage: test
  before_script:
    - apk update && apk add --no-cache make bash git curl openssl docker jq
    - pip3 install sphinx==5.1.1 sphinx-rtd-theme==1.0.0 recommonmark==0.7.1 conan==1.60.2
    - pip3 install --index-url https://artefact.skao.int/repository/pypi-all/simple skart
    - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    - helm repo add ska https://artefact.skao.int/repository/helm-internal
    - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -O terraform.zip
    - unzip terraform.zip && rm terraform.zip && mv terraform /usr/bin/terraform
    - wget https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VERSION}/tflint_linux_amd64.zip -O tflint.zip
    - unzip tflint.zip && rm tflint.zip && mv tflint /usr/bin/tflint
    - mkdir -p build/reports
    - mkdir -p build/charts
  script:
  - cd tests
  - make test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always

psi-low-k8s-test:
  stage: test-psi-low
  when: manual
  tags:
    - k8srunner-psi-low
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    on_stop: psi-low-stop-k8s
    auto_stop_in: 1 minute
  variables:
    TANGO_HOST: "tango-databaseds.$KUBE_NAMESPACE:10000"
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    K8S_HELMFILE_ENV: psi-low
    STATION_LABEL: psi-low
    PASS_PROXY_CONFIG: "yes"
    JUNITXML_REPORT_PATH: build/reports/psi-low-functional-tests.xml
    CUCUMBER_JSON_PATH: build/reports/psi-low-cucumber.json
    JSON_REPORT_PATH: build/reports/psi-low-report.json
  before_script:
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always

psi-low-xray-publish:
  stage: test-psi-low
  needs:
    - psi-low-k8s-test
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    TEST_ENV: PSI-LOW
    REALHW_OR_SIMULATED: real
    XRAY_TEST_RESULT_FILE: build/reports/psi-low-cucumber.json
  script:
    - make xray-publish
  allow_failure: true

psi-low-stop-k8s:
  stage: test-psi-low
  needs:
    - psi-low-k8s-test
  tags:
    - k8srunner-psi-low
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    action: stop
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  allow_failure: true
