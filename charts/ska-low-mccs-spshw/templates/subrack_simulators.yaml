{{- range $key, $value := ((.Values.simulators).subracks)}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{$value.host}}
  namespace: {{$.Release.Namespace}}
  labels:
    component: subrack-simulator-{{$key}}
spec:
  ports:
  - name: http
    port: {{$value.port | default 8081}}
  type: ClusterIP
  selector:
    component: subrack-simulator-{{$key}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{$value.host}}
  namespace: {{$.Release.Namespace}}
  labels:
    component: subrack-simulator-{{$key}}
spec:
  selector:
    matchLabels:
      component: subrack-simulator-{{$key}}
  serviceName: subrack-simulator-{{$key}}
  replicas: 1
  template:
    metadata:
      labels:
        component: subrack-simulator-{{$key}}
    spec:
      containers:
      - name: simulator-{{$key}}
{{- with $.Values.image}}
        image: {{.registry}}/{{.name}}:{{.tag}}
{{- end}}
        imagePullPolicy: IfNotPresent
        command:
          - "SubrackSimulator"
        env:
          - name: SIMULATOR_PORT
            value: {{$value.port | default "8081" | quote}}
{{- end}}