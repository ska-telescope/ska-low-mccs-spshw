@startuml
hide empty members
scale 2000 width

package tile_device {
  class TilePowerManager
  TilePowerManager : +__init__()
  class MccsTile
  MccsTile : +__init__()
  MccsTile : +do()
  MccsTile : -_initialise_connections()
  MccsTile : -_initialise_hardware_management()
  MccsTile : -_initialise_health_monitoring()
  MccsTile : -_initialise_power_management()
  MccsTile : +interrupt()
  MccsTile : +always_executed_hook()
  MccsTile : +delete_device()
  MccsTile : +health_changed()
  MccsTile : +logicalTileId()
  MccsTile : +subarrayId()
  MccsTile : +stationId()
  MccsTile : +cspDestinationIp()
  MccsTile : +cspDestinationMac()
  MccsTile : +cspDestinationPort()
  MccsTile : +firmwareName()
  MccsTile : +firmwareVersion()
  MccsTile : +voltage()
  MccsTile : +current()
  MccsTile : +isProgrammed()
  MccsTile : +board_temperature()
  MccsTile : +fpga1_temperature()
  MccsTile : +fpga2_temperature()
  MccsTile : +fpga1_time()
  MccsTile : +fpga2_time()
  MccsTile : +antennaIds()
  MccsTile : +fortyGbDestinationIps()
  MccsTile : +fortyGbDestinationMacs()
  MccsTile : +fortyGbDestinationPorts()
  MccsTile : +adcPower()
  MccsTile : +currentTileBeamformerFrame()
  MccsTile : +checkPendingDataRequests()
  MccsTile : +isBeamformerRunning()
  MccsTile : +phaseTerminalCount()
  MccsTile : +phaseTerminalCount()
  MccsTile : +ppsDelay()
  MccsTile : +init_command_objects()
  MccsTile : +Initialise()
  MccsTile : +GetFirmwareAvailable()
  MccsTile : +DownloadFirmware()
  MccsTile : +ProgramCPLD()
  MccsTile : +GetRegisterList()
  MccsTile : +ReadRegister()
  MccsTile : +WriteRegister()
  MccsTile : +ReadAddress()
  MccsTile : +WriteAddress()
  MccsTile : +Configure40GCore()
  MccsTile : +Get40GCoreConfiguration()
  MccsTile : +SetLmcDownload()
  MccsTile : +SetChanneliserTruncation()
  MccsTile : +SetBeamFormerRegions()
  MccsTile : +ConfigureStationBeamformer()
  MccsTile : +LoadCalibrationCoefficients()
  MccsTile : +LoadBeamAngle()
  MccsTile : +__init__()
  MccsTile : +LoadAntennaTapering()
  MccsTile : +SwitchCalibrationBank()
  MccsTile : +SetPointingDelay()
  MccsTile : +LoadPointingDelay()
  MccsTile : +StartBeamformer()
  MccsTile : +StopBeamformer()
  MccsTile : +ConfigureIntegratedChannelData()
  MccsTile : +ConfigureIntegratedBeamData()
  MccsTile : +SendRawData()
  MccsTile : +SendChannelisedData()
  MccsTile : +SendChannelisedDataContinuous()
  MccsTile : +SendBeamData()
  MccsTile : +StopDataTransmission()
  MccsTile : +ComputeCalibrationCoefficients()
  MccsTile : +StartAcquisition()
  MccsTile : +SetTimeDelays()
  MccsTile : +SetCspRounding()
  MccsTile : +SetLmcIntegratedDownload()
  MccsTile : +SendRawDataSynchronised()
  MccsTile : +SendChannelisedDataNarrowband()
  MccsTile : +TweakTransceivers()
  MccsTile : +PostSynchronisation()
  MccsTile : +SyncFpgas()
  MccsTile : +CalculateDelay()
  MccsTile : -_thread
  MccsTile : -_lock
  MccsTile : -_interrupt
  MccsTile : -_health_state
  MccsTile : -_logical_tile_id
  MccsTile : -_subarray_id
  MccsTile : -_station_id
  MccsTile : -_csp_destination_ip
  MccsTile : -_csp_destination_mac
  MccsTile : -_csp_destination_port
  MccsTile : -_antenna_ids
  MccsTile : -_antennas_per_tile
}

package tile_hardware {
  class TileHardwareHealthEvaluator
  class TileHardwareFactory
  TileHardwareFactory : +__init__()
  TileHardwareFactory : -_create_simulator()
  class TileHardwareManager
  TileHardwareManager : +__init__()
  TileHardwareManager : +firmware_available()
  TileHardwareManager : +firmware_name()
  TileHardwareManager : +firmware_version()
  TileHardwareManager : +download_firmware()
  TileHardwareManager : +cpld_flash_write()
  TileHardwareManager : +voltage()
  TileHardwareManager : +current()
  TileHardwareManager : +board_temperature()
  TileHardwareManager : +fpga1_temperature()
  TileHardwareManager : +fpga2_temperature()
  TileHardwareManager : +fpga1_time()
  TileHardwareManager : +fpga2_time()
  TileHardwareManager : +pps_delay()
  TileHardwareManager : +is_programmed()
  TileHardwareManager : +adc_rms()
  TileHardwareManager : +current_tile_beamformer_frame()
  TileHardwareManager : +is_beamformer_running()
  TileHardwareManager : +start_beamformer()
  TileHardwareManager : +stop_beamformer()
  TileHardwareManager : +phase_terminal_count()
  TileHardwareManager : +phase_terminal_count()
  TileHardwareManager : +initialise()
  TileHardwareManager : +register_list()
  TileHardwareManager : +read_register()
  TileHardwareManager : +write_register()
  TileHardwareManager : +read_address()
  TileHardwareManager : +write_address()
  TileHardwareManager : +get_40g_configuration()
  TileHardwareManager : +set_channeliser_truncation()
  TileHardwareManager : +set_beamformer_regions()
  TileHardwareManager : +initialise_beamformer()
  TileHardwareManager : +load_calibration_coefficients()
  TileHardwareManager : +load_beam_angle()
  TileHardwareManager : +load_antenna_tapering()
  TileHardwareManager : +switch_calibration_bank()
  TileHardwareManager : +set_pointing_delay()
  TileHardwareManager : +load_pointing_delay()
  TileHardwareManager : +configure_integrated_channel_data()
  TileHardwareManager : +configure_integrated_beam_data()
  TileHardwareManager : +send_beam_data()
  TileHardwareManager : +stop_data_transmission()
  TileHardwareManager : +compute_calibration_coefficients()
  TileHardwareManager : +start_acquisition()
  TileHardwareManager : +set_time_delays()
  TileHardwareManager : +set_csp_rounding()
  TileHardwareManager : +check_pending_data_requests()
  TileHardwareManager : +tweak_transceivers()
  TileHardwareManager : +phase_terminal_count()
  TileHardwareManager : +phase_terminal_count()
  TileHardwareManager : +post_synchronisation()
  TileHardwareManager : +sync_fpgas()
  TileHardwareManager : +calculate_delay()
  TileHardwareFactory : -_logger
}

package tpm_simulator {
  class TpmSimulator
  TpmSimulator : +__init__()
  TpmSimulator : +firmware_available()
  TpmSimulator : +firmware_name()
  TpmSimulator : +firmware_version()
  TpmSimulator : +is_programmed()
  TpmSimulator : +download_firmware()
  TpmSimulator : +cpld_flash_write()
  TpmSimulator : +initialise()
  TpmSimulator : +board_temperature()
  TpmSimulator : +voltage()
  TpmSimulator : +current()
  TpmSimulator : +fpga1_temperature()
  TpmSimulator : +fpga2_temperature()
  TpmSimulator : +adc_rms()
  TpmSimulator : +fpga1_time()
  TpmSimulator : +fpga2_time()
  TpmSimulator : +pps_delay()
  TpmSimulator : +register_list()
  TpmSimulator : +read_register()
  TpmSimulator : +write_register()
  TpmSimulator : +read_address()
  TpmSimulator : +write_address()
  TpmSimulator : +get_40g_configuration()
  TpmSimulator : +set_channeliser_truncation()
  TpmSimulator : +set_beamformer_regions()
  TpmSimulator : +initialise_beamformer()
  TpmSimulator : +load_calibration_coefficients()
  TpmSimulator : +load_beam_angle()
  TpmSimulator : +load_antenna_tapering()
  TpmSimulator : +switch_calibration_bank()
  TpmSimulator : +set_pointing_delay()
  TpmSimulator : +load_pointing_delay()
  TpmSimulator : +start_beamformer()
  TpmSimulator : +stop_beamformer()
  TpmSimulator : +configure_integrated_channel_data()
  TpmSimulator : +configure_integrated_beam_data()
  TpmSimulator : +send_beam_data()
  TpmSimulator : +stop_data_transmission()
  TpmSimulator : +compute_calibration_coefficients()
  TpmSimulator : +start_acquisition()
  TpmSimulator : +set_time_delays()
  TpmSimulator : +set_csp_rounding()
  TpmSimulator : +current_tile_beamformer_frame()
  TpmSimulator : +is_beamformer_running()
  TpmSimulator : +check_pending_data_requests()
  TpmSimulator : +tweak_transceivers()
  TpmSimulator : +phase_terminal_count()
  TpmSimulator : +phase_terminal_count()
  TpmSimulator : +post_synchronisation()
  TpmSimulator : +sync_fpgas()
  TpmSimulator : +calculate_delay()
  TpmSimulator : +logger
  TpmSimulator : -_is_programmed
  TpmSimulator : -_is_beamformer_running
  TpmSimulator : -_phase_terminal_count
  TpmSimulator : -_voltage
  TpmSimulator : -_current
  TpmSimulator : -_board_temperature
  TpmSimulator : -_fpga1_temperature
  TpmSimulator : -_fpga2_temperature
  TpmSimulator : -_adc_rms
  TpmSimulator : -_current_tile_beamformer_frame
  TpmSimulator : -_pps_delay
  TpmSimulator : -_firmware_name
  TpmSimulator : -_firmware_available
  TpmSimulator : -_fpga1_time
  TpmSimulator : -_fpga2_time
  TpmSimulator : -_address_map
  TpmSimulator : -_forty_gb_core_list
  TpmSimulator : -_register_map
}

package apiu_device {
  class APIUHardwareHealthEvaluator
  class APIUHardwareFactory
  APIUHardwareFactory : +__init__()
  APIUHardwareFactory : -_create_simulator()
  APIUHardwareFactory : +__init__()
  APIUHardwareFactory : +voltage()
  APIUHardwareFactory : +current()
  APIUHardwareFactory : +temperature()
  APIUHardwareFactory : +humidity()
  APIUHardwareFactory : +turn_off_antenna()
  APIUHardwareFactory : +turn_on_antenna()
  APIUHardwareFactory : +is_antenna_on()
  APIUHardwareFactory : +get_antenna_current()
  APIUHardwareFactory : +get_antenna_voltage()
  APIUHardwareFactory : +get_antenna_temperature()
  class MccsAPIU
  MccsAPIU : +__init__()
  MccsAPIU : -_initialise_connections()
  MccsAPIU : -_initialise_hardware_management()
  MccsAPIU : -_initialise_health_monitoring()
  MccsAPIU : +interrupt()
  MccsAPIU : +always_executed_hook()
  MccsAPIU : +delete_device()
  MccsAPIU : +health_changed()
  MccsAPIU : +voltage()
  MccsAPIU : +current()
  MccsAPIU : +temperature()
  MccsAPIU : +humidity()
  MccsAPIU : +isAlive()
  MccsAPIU : +overCurrentThreshold()
  MccsAPIU : +overCurrentThreshold()
  MccsAPIU : +overVoltageThreshold()
  MccsAPIU : +overVoltageThreshold()
  MccsAPIU : +humidityThreshold()
  MccsAPIU : +IsAntennaOn()
  MccsAPIU : +PowerUpAntenna()
  MccsAPIU : +PowerDownAntenna()
  MccsAPIU : +PowerUp()
  MccsAPIU : +PowerDown()
  MccsAPIU : -_update_health_state()
  MccsAPIU : -_thread
  MccsAPIU : -_lock
  MccsAPIU : -_interrupt
  MccsAPIU : -_health_state
  MccsAPIU : -_overCurrentThreshold
  MccsAPIU : -_overVoltageThreshold
  MccsAPIU : -_humidityThreshold
}

package apiu_simulator {
  class AntennaHardwareSimulator
  AntennaHardwareSimulator : +__init__()
  AntennaHardwareSimulator : +off()
  AntennaHardwareSimulator : +on()
  AntennaHardwareSimulator : +voltage()
  AntennaHardwareSimulator : +current()
  AntennaHardwareSimulator : +temperature()
  AntennaHardwareSimulator : -_check_on()
  AntennaHardwareSimulator : +simulate_current()
  AntennaHardwareSimulator : +simulate_voltage()
  AntennaHardwareSimulator : +simulate_temperature()
  class APIUSimulator
  APIUSimulator : +__init__()
  APIUSimulator : +off()
  APIUSimulator : +on()
  APIUSimulator : +voltage()
  APIUSimulator : +current()
  APIUSimulator : +temperature()
  APIUSimulator : +humidity()
  APIUSimulator : +is_antenna_on()
  APIUSimulator : +turn_off_antenna()
  APIUSimulator : +turn_on_antenna()
  APIUSimulator : +get_antenna_current()
  APIUSimulator : +get_antenna_voltage()
  APIUSimulator : +get_antenna_temperature()
  APIUSimulator : -_check_on()
  APIUSimulator : -_voltage
  APIUSimulator : -_current
  APIUSimulator : -_temperature
  APIUSimulator : -_humidity
  APIUSimulator : -_antennas
  AntennaHardwareSimulator : -_voltage
  AntennaHardwareSimulator : -_current
  AntennaHardwareSimulator : -_temperature
}
package antenna {
  class AntennaHardwareHealthEvaluator
  class AntennaAPIUProxy
  AntennaAPIUProxy : +__init__()
  AntennaAPIUProxy : +on()
  AntennaAPIUProxy : +off()
  AntennaAPIUProxy : +is_on()
  AntennaAPIUProxy : +current()
  AntennaAPIUProxy : +voltage()
  AntennaAPIUProxy : +temperature()
  class AntennaTileProxy
  AntennaTileProxy : +__init__()
  class AntennaHardwareDriver
  AntennaHardwareDriver : +is_connected()
  AntennaHardwareDriver : +on()
  AntennaHardwareDriver : +off()
  AntennaHardwareDriver : +is_on()
  AntennaHardwareDriver : +current()
  AntennaHardwareDriver : +voltage()
  AntennaHardwareDriver : +temperature()
  class AntennaHardwareFactory
  AntennaHardwareFactory : +hardware()
  class AntennaHardwareManager
  AntennaHardwareManager : +voltage()
  AntennaHardwareManager : +current()
  AntennaHardwareManager : +temperature()
  class MccsAntenna
  MccsAntenna : +__init__()
  MccsAntenna : -_initialise_connections()
  MccsAntenna : -_initialise_hardware_management()
  MccsAntenna : -_initialise_health_monitoring()
  MccsAntenna : +interrupt()
  MccsAntenna : +always_executed_hook()
  MccsAntenna : +delete_device()
  MccsAntenna : +health_changed()
  MccsAntenna : +simulationMode()
  MccsAntenna : +simulationMode()
  MccsAntenna : +antennaId()
  MccsAntenna : +gain()
  MccsAntenna : +rms()
  MccsAntenna : +voltage()
  MccsAntenna : +current()
  MccsAntenna : +temperature()
  MccsAntenna : +xPolarisationFaulty()
  MccsAntenna : +yPolarisationFaulty()
  MccsAntenna : +fieldNodeLongitude()
  MccsAntenna : +fieldNodeLatitude()
  MccsAntenna : +altitude()
  MccsAntenna : +xDisplacement()
  MccsAntenna : +yDisplacement()
  MccsAntenna : +timestampOfLastSpectrum()
  MccsAntenna : +logicalAntennaId()
  MccsAntenna : +xPolarisationScalingFactor()
  MccsAntenna : +yPolarisationScalingFactor()
  MccsAntenna : +calibrationCoefficient()
  MccsAntenna : +pointingCoefficient()
  MccsAntenna : +spectrumX()
  MccsAntenna : +spectrumY()
  MccsAntenna : +position()
  MccsAntenna : +delays()
  MccsAntenna : +delayRates()
  MccsAntenna : +bandpassCoefficient()
  MccsAntenna : +PowerOn()
  MccsAntenna : +PowerOff()
  AntennaTileProxy : -_logical_antenna_id
  AntennaTileProxy : -_tile
  AntennaTileProxy : -_is_connected
  AntennaAPIUProxy : -_logical_antenna_id
  AntennaAPIUProxy : -_apiu
  AntennaAPIUProxy : -_is_connected
  AntennaHardwareDriver : -_apiu
  AntennaHardwareDriver : -_tile
  AntennaHardwareFactory : -_hardware
  MccsAntenna : -_thread
  MccsAntenna : -_lock
  MccsAntenna : -_interrupt
  MccsAntenna : -_health_state
}
package tel_state {
  class MccsTelState
  MccsTelState : +health_changed()
  MccsTelState : +always_executed_hook()
  MccsTelState : +delete_device()
  MccsTelState : +elementsStates()
  MccsTelState : +observationsStates()
  MccsTelState : +algorithms()
  MccsTelState : +algorithmsVersion()
  MccsTelState : -_health_state
  MccsTelState : -_elements_states
  MccsTelState : -_observations_states
  MccsTelState : -_algorithms
  MccsTelState : -_algorithms_version
}

package transient_buffer {
  class MccsTransientBuffer
  MccsTransientBuffer : +always_executed_hook()
  MccsTransientBuffer : +delete_device()
  MccsTransientBuffer : +health_changed()
  MccsTransientBuffer : +stationId()
  MccsTransientBuffer : +transientBufferJobId()
  MccsTransientBuffer : +resamplingBits()
  MccsTransientBuffer : +nStations()
  MccsTransientBuffer : +transientFrequencyWindow()
  MccsTransientBuffer : +stationIds()
  MccsTransientBuffer : -_health_state
}

SKABaseDevice <|-- MccsTile
HardwareHealthEvaluator <|-- TileHardwareHealthEvaluator
PowerManager <|-- TilePowerManager
SimulableHardwareFactory <|-- TileHardwareFactory
SimulableHardwareManager <|-- TileHardwareManager
HardwareSimulator <|-- TpmSimulator
MccsTile -- TilePowerManager
TileHardwareFactory -- TpmSimulator
TileHardwareManager -- TileHardwareHealthEvaluator
OnOffHardwareSimulator <|-- APIUSimulator
HardwareHealthEvaluator <|-- APIUHardwareHealthEvaluator
SimulableHardwareFactory <|-- APIUHardwareFactory
SKABaseDevice <|-- MccsAPIU
OnOffHardwareSimulator <|-- AntennaHardwareSimulator
APIUSimulator -- AntennaHardwareSimulator
APIUHardwareFactory -- APIUSimulator
APIUHardwareFactory -- APIUHardwareHealthEvaluator
@enduml


@startuml

package Crap {
  class UmlClassFigGenerator
  UmlClassFigGenerator : +__init__()
  UmlClassFigGenerator : -_check_name_visibility()
  UmlClassFigGenerator : -_check_line_class_def()
  UmlClassFigGenerator : -_check_line_method_def()
  UmlClassFigGenerator : -_check_line_member_def()
  UmlClassFigGenerator : -_check_line_class_relation()
  UmlClassFigGenerator : -_read_file()
  UmlClassFigGenerator : -_pre_read_file()
  UmlClassFigGenerator : -_post_read_file()
  UmlClassFigGenerator : -_post_read_files()
  UmlClassFigGenerator : -_read_files()
  UmlClassFigGenerator : +gen_fig()
  UmlClassFigGenerator : +file_list
  UmlClassFigGenerator : +re_class_def
  UmlClassFigGenerator : +re_class_def_noparent
  UmlClassFigGenerator : +re_method_def
  UmlClassFigGenerator : +re_member_def
  UmlClassFigGenerator : +re_class_name_call
  UmlClassFigGenerator : +re_ignore_line
  UmlClassFigGenerator : +re_private_name
  UmlClassFigGenerator : +re_special_name
  UmlClassFigGenerator : +parent_dic
  UmlClassFigGenerator : +relate_dic
  UmlClassFigGenerator : +class_list
  UmlClassFigGenerator : +ignore_parents
  UmlClassFigGenerator : +class_name
  UmlClassFigGenerator : +member_dic
}

package device {
  class MccsDevice
  MccsDevice : +do()
  MccsDevice : +init_command_objects()
  MccsDevice : +always_executed_hook()
  MccsDevice : +delete_device()
  MccsDevice : +versionId()
  MccsDevice : +buildState()
  MccsDevice : +isHardwareDevice()
  MccsDevice : +diagMode()
  MccsDevice : +calledUndefinedDevice()
  MccsDevice : +calledDeadServer()
  MccsDevice : +detectedDeadServer()
  MccsDevice : +calledNonRunningDevice()
  MccsDevice : +callTimeout()
  MccsDevice : +callCommFailed()
  MccsDevice : +invalidAsynId()
  MccsDevice : +calledInexistentCallback()
  MccsDevice : +requestIdMismatch()
  MccsDevice : +expectedReplyNotReady()
  MccsDevice : +experiencedSubscriptionFailure()
  MccsDevice : +invalidEventId()
  MccsDevice : +do()
  MccsDevice : +ExceptionCallback()
  MccsDevice : +do()
  MccsDevice : +DefaultAlarmOnCallback()
  MccsDevice : +do()
  MccsDevice : +DefaultAlarmOffCallback()
  MccsDevice : +do()
  MccsDevice : +GetFullReport()
  MccsDevice : +do()
  MccsDevice : +GetCommandReport()
  MccsDevice : +do()
  MccsDevice : +GetAttributeReport()
  MccsDevice : +do()
  MccsDevice : +ConstructDeviceProxyAddress()
}

package events {
  class EventSubscriptionHandler
  EventSubscriptionHandler : +__init__()
  EventSubscriptionHandler : -_subscribe()
  EventSubscriptionHandler : -_read()
  EventSubscriptionHandler : -_process_event()
  EventSubscriptionHandler : -_call()
  EventSubscriptionHandler : +register_callback()
  EventSubscriptionHandler : +push_event()
  EventSubscriptionHandler : -_unsubscribe()
  EventSubscriptionHandler : +__del__()
  class DeviceEventManager
  DeviceEventManager : +__init__()
  DeviceEventManager : +register_callback()
  DeviceEventManager : -_create_event_subscription_handler()
  class EventManager
  EventManager : +__init__()
  EventManager : +register_callback()
  EventManager : -_create_device_event_manager()
  EventManager : -_logger
  EventManager : -_allowed_fqdns
  EventManager : -_allowed_events
  EventManager : -_handlers
  EventSubscriptionHandler : -_logger
  EventSubscriptionHandler : -_device
  EventSubscriptionHandler : -_fqdn
  EventSubscriptionHandler : -_event_name
  EventSubscriptionHandler : -_event_value
  EventSubscriptionHandler : -_event_quality
  EventSubscriptionHandler : -_subscription_id
  EventSubscriptionHandler : -_callbacks
  DeviceEventManager : -_logger
  DeviceEventManager : -_allowed_events
  DeviceEventManager : -_handlers
  DeviceEventManager : -_fqdn
  DeviceEventManager : -_device
}

package group_device {
  class MccsGroupDevice
  MccsGroupDevice : +do()
  MccsGroupDevice : +always_executed_hook()
  MccsGroupDevice : +delete_device()
  MccsGroupDevice : +memberStates()
  MccsGroupDevice : +memberList()
  MccsGroupDevice : +init_command_objects()
  MccsGroupDevice : +do()
  MccsGroupDevice : +AddMember()
  MccsGroupDevice : +do()
  MccsGroupDevice : +RemoveMember()
  MccsGroupDevice : +do()
  MccsGroupDevice : +Run()
}

package hardware {
  class HardwareDriver
  HardwareDriver : +is_connected()
  HardwareDriver : -_check_connected()
  class HardwareHealthEvaluator
  HardwareHealthEvaluator : +evaluate_health()
  class HardwareFactory
  HardwareFactory : +hardware()
  class HardwareManager
  HardwareManager : +__init__()
  HardwareManager : +poll()
  HardwareManager : +health()
  HardwareManager : -_update_health()
  HardwareManager : +register_health_callback()
  class HardwareSimulator
  HardwareSimulator : +__init__()
  HardwareSimulator : +is_connected()
  HardwareSimulator : +simulate_connection_failure()
  class SimulableHardwareFactory
  SimulableHardwareFactory : +__init__()
  SimulableHardwareFactory : +hardware()
  SimulableHardwareFactory : +simulation_mode()
  SimulableHardwareFactory : +simulation_mode()
  SimulableHardwareFactory : -_get_driver()
  SimulableHardwareFactory : -_create_driver()
  SimulableHardwareFactory : -_get_simulator()
  SimulableHardwareFactory : -_create_simulator()
  class SimulableHardwareManager
  SimulableHardwareManager : +simulation_mode()
  SimulableHardwareManager : +simulation_mode()
  SimulableHardwareManager : +simulate_connection_failure()
  class OnOffHardwareDriver
  OnOffHardwareDriver : +on()
  OnOffHardwareDriver : +off()
  OnOffHardwareDriver : +is_on()
  OnOffHardwareDriver : -_check_on()
  OnOffHardwareDriver : +__init__()
  OnOffHardwareDriver : +off()
  OnOffHardwareDriver : +on()
  OnOffHardwareDriver : +is_on()
  class OnOffHardwareManager
  OnOffHardwareManager : +off()
  OnOffHardwareManager : +on()
  OnOffHardwareManager : +is_on()
  HardwareSimulator : -_is_connected
  SimulableHardwareFactory : -_simulation_mode
  SimulableHardwareFactory : -_driver
  SimulableHardwareFactory : -_simulator
  SimulableHardwareFactory : -_hardware
  HardwareManager : -_factory
  HardwareManager : -_health
  HardwareManager : -_health_callbacks
  HardwareManager : -_health_evaluator
  OnOffHardwareDriver : -_is_on
}

package health {
  class DeviceHealthPolicy
  DeviceHealthPolicy : +compute_health()
  class DeviceHealthRollupPolicy
  DeviceHealthRollupPolicy : +__init__()
  DeviceHealthRollupPolicy : -_compute_device_health()
  DeviceHealthRollupPolicy : +compute_health()
  class DeviceHealthMonitor
  DeviceHealthMonitor : +__init__()
  DeviceHealthMonitor : +register_callback()
  DeviceHealthMonitor : -_health_state_changed()
  DeviceHealthMonitor : -_admin_mode_changed()
  DeviceHealthMonitor : -_compute_health()
  DeviceHealthMonitor : -_update_health()
  class HealthMonitor
  HealthMonitor : +__init__()
  HealthMonitor : +register_callback()
  class HealthModel
  HealthModel : +__init__()
  HealthModel : -_init_health_monitor()
  HealthModel : +health()
  HealthModel : +register_callback()
  HealthModel : -_hardware_health_changed()
  HealthModel : -_device_health_changed()
  HealthModel : -_compute_health()
  HealthModel : -_update_health()
  class MutableHealthMonitor
  MutableHealthMonitor : +__init__()
  MutableHealthMonitor : +register_callback()
  MutableHealthMonitor : +add_devices()
  MutableHealthMonitor : +remove_devices()
  MutableHealthMonitor : +remove_all_devices()
  class MutableHealthModel
  MutableHealthModel : +__init__()
  MutableHealthModel : -_init_health_monitor()
  MutableHealthModel : +add_devices()
  MutableHealthModel : +remove_devices()
  DeviceHealthRollupPolicy : -_degraded_weight
  DeviceHealthRollupPolicy : -_failed_weight
  MutableHealthModel : -_event_manager
  MutableHealthModel : -_health_monitor
  DeviceHealthMonitor : -_fqdn
  DeviceHealthMonitor : -_device_admin_mode
  DeviceHealthMonitor : -_device_health_state
  DeviceHealthMonitor : -_interpreted_health
  DeviceHealthMonitor : -_callbacks
  HealthMonitor : -_device_health_monitors
  MutableHealthMonitor : -_event_manager
  MutableHealthMonitor : -_pool_callbacks
  HealthModel : -_device_health_rollup_policy
  HealthModel : -_health
  HealthModel : -_callbacks
  HealthModel : -_hardware_manager
  HealthModel : -_hardware_health
  HealthModel : -_device_health
  HealthModel : -_health_monitor
}

package __init__ {
}

package power {
  class PowerManagerError
  class PowerManager
  PowerManager : +__init__()
  PowerManager : +off()
  PowerManager : +on()
  PowerManager : +is_on()
  PowerManager : -_is_on
  PowerManager : +hardware
  PowerManager : +devices
}

package release {
}

package resource {
  class ResourceState
  class ResourceAvailabilityPolicy
  ResourceAvailabilityPolicy : +__init__()
  ResourceAvailabilityPolicy : +is_allocatable()
  ResourceAvailabilityPolicy : +assign_allocatable_health_states()
  ResourceAvailabilityPolicy : +reset()
  class Resource
  Resource : +__init__()
  Resource : +assigned_to()
  Resource : +is_assigned()
  Resource : +is_available()
  Resource : +is_unavailable()
  Resource : +is_not_available()
  Resource : +is_healthy()
  Resource : -_health_changed()
  Resource : +assign()
  Resource : +release()
  Resource : +make_unavailable()
  Resource : +make_available()
  class ResourceManager
  ResourceManager : -_except_on_unmanaged()
  ResourceManager : -_add_to_managed()
  ResourceManager : -_remove_from_managed()
  ResourceManager : +update_resource_health()
  ResourceManager : +get_all_fqdns()
  ResourceManager : +get_assigned_fqdns()
  ResourceManager : +query_allocation()
  ResourceManager : +assign()
  ResourceManager : +release()
  ResourceManager : +make_unavailable()
  ResourceManager : +make_available()
  ResourceManager : +fqdn_from_id()
  ResourceManager : +assign_allocatable_health_states()
  ResourceManager : +reset_resource_availability_policy()
  ResourceAvailabilityPolicy : -_allocatable_health_states
  Resource : -_resource_availability_policy
  Resource : -_fqdn
  Resource : -_resource_state
  Resource : -_assigned_to
  Resource : -_health_state
  Resource : -_device_id
  ResourceManager : -_managername
  ResourceManager : -_resources
  ResourceManager : -_health_monitor
  ResourceManager : +resource_availability_policy
}

package station_beam {
  class StationBeamHealthEvaluator
  StationBeamHealthEvaluator : +evaluate_health()
  class StationBeamDriver
  StationBeamDriver : +__init__()
  StationBeamDriver : +is_connected()
  StationBeamDriver : +is_locked()
  StationBeamDriver : +is_locked()
  class StationBeamHardwareFactory
  StationBeamHardwareFactory : +__init__()
  StationBeamHardwareFactory : +hardware()
  class StationBeamHardwareManager
  StationBeamHardwareManager : +__init__()
  StationBeamHardwareManager : +is_locked()
  StationBeamHardwareManager : +is_locked()
  class MccsStationBeam
  MccsStationBeam : +__init__()
  MccsStationBeam : +do()
  MccsStationBeam : -_initialise_connections()
  MccsStationBeam : -_initialise_hardware_management()
  MccsStationBeam : -_initialise_health_monitoring()
  MccsStationBeam : +interrupt()
  MccsStationBeam : +init_command_objects()
  MccsStationBeam : +always_executed_hook()
  MccsStationBeam : +delete_device()
  MccsStationBeam : +health_changed()
  MccsStationBeam : +beamId()
  MccsStationBeam : +stationIds()
  MccsStationBeam : +stationIds()
  MccsStationBeam : +logicalBeamId()
  MccsStationBeam : +logicalBeamId()
  MccsStationBeam : +updateRate()
  MccsStationBeam : +isBeamLocked()
  MccsStationBeam : +isBeamLocked()
  MccsStationBeam : +channels()
  MccsStationBeam : +desiredPointing()
  MccsStationBeam : +desiredPointing()
  MccsStationBeam : +pointingDelay()
  MccsStationBeam : +pointingDelayRate()
  MccsStationBeam : +antennaWeights()
  MccsStationBeam : +antennaWeights()
  MccsStationBeam : +do()
  MccsStationBeam : +Configure()
  StationBeamDriver : -_is_locked
  MccsStationBeam : -_thread
  MccsStationBeam : -_lock
  MccsStationBeam : -_interrupt
  MccsStationBeam : -_health_state
  MccsStationBeam : -_station_ids
  MccsStationBeam : -_logical_beam_id
  MccsStationBeam : -_desired_pointing
  MccsStationBeam : -_antenna_weights
  StationBeamHardwareFactory : -_hardware
}

package station {
  class StationPowerManager
  StationPowerManager : +__init__()
  class MccsStation
  MccsStation : +__init__()
  MccsStation : +do()
  MccsStation : -_initialise_connections()
  MccsStation : -_initialise_health_monitoring()
  MccsStation : -_initialise_power_management()
  MccsStation : +interrupt()
  MccsStation : +always_executed_hook()
  MccsStation : +delete_device()
  MccsStation : +health_changed()
  MccsStation : +subarrayId()
  MccsStation : +subarrayId()
  MccsStation : +transientBufferFQDN()
  MccsStation : +isCalibrated()
  MccsStation : +isConfigured()
  MccsStation : +calibrationJobId()
  MccsStation : +daqJobId()
  MccsStation : +dataDirectory()
  MccsStation : +beamFQDNs()
  MccsStation : +delayCentre()
  MccsStation : +delayCentre()
  MccsStation : +calibrationCoefficients()
  MccsStation : +init_command_objects()
  MccsStation : +do()
  MccsStation : +do()
  MccsStation : +do()
  MccsStation : +Configure()
  MccsStation : +do()
  MccsStation : +InitialSetup()
  MccsStation : -_thread
  MccsStation : -_lock
  MccsStation : -_interrupt
  MccsStation : -_health_state
  MccsStation : -_subarray_id
  MccsStation : -_delay_centre
}

package subarray {
  class StationsResourceManager
  StationsResourceManager : +__init__()
  StationsResourceManager : +items()
  StationsResourceManager : +add_to_managed()
  StationsResourceManager : +release_all()
  StationsResourceManager : +station_fqdns()
  StationsResourceManager : +station_ids()
  class StationBeamsResourceManager
  StationBeamsResourceManager : +__init__()
  StationBeamsResourceManager : +__len__()
  StationBeamsResourceManager : +assign()
  StationBeamsResourceManager : +release()
  StationBeamsResourceManager : +release_all()
  StationBeamsResourceManager : +station_beam_fqdns()
  StationBeamsResourceManager : +station_fqdns()
  class TransientBufferManager
  TransientBufferManager : +__init__()
  TransientBufferManager : +send()
  class MccsSubarray
  MccsSubarray : +__init__()
  MccsSubarray : +do()
  MccsSubarray : -_initialise_connections()
  MccsSubarray : -_initialise_health_monitoring()
  MccsSubarray : -_initialise_resource_management()
  MccsSubarray : +init_command_objects()
  MccsSubarray : +always_executed_hook()
  MccsSubarray : +delete_device()
  MccsSubarray : +health_changed()
  MccsSubarray : +scanId()
  MccsSubarray : +scanId()
  MccsSubarray : +stationFQDNs()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +succeeded()
  MccsSubarray : +do()
  MccsSubarray : +succeeded()
  MccsSubarray : +do()
  MccsSubarray : +succeeded()
  MccsSubarray : +do()
  MccsSubarray : +check_allowed()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +do()
  MccsSubarray : +SendTransientBuffer()
  StationBeamsResourceManager : -_stations
  StationsResourceManager : -_devices
  MccsSubarray : -_thread
  MccsSubarray : -_lock
  MccsSubarray : -_interrupt
  MccsSubarray : -_health_state
  MccsSubarray : -_scan_id
}


package utils {
  class json_input
  json_input : +__init__()
  json_input : +__call__()
  json_input : +wrapped()
  json_input : -_parse()
  json_input : +schema
}

HardwareManager <|-- SimulableHardwareManager
HardwareHealthEvaluator <|-- AntennaHardwareHealthEvaluator
SKAObsDevice <|-- MccsStationBeam
ValueError <|-- PowerManagerError
HardwareFactory <|-- SimulableHardwareFactory
OnOffHardwareDriver <|-- AntennaHardwareDriver
HardwareManager <|-- OnOffHardwareManager
OnOffHardwareManager <|-- AntennaHardwareManager
SKASubarray <|-- MccsSubarray
HardwareManager <|-- StationBeamHardwareManager
Enum <|-- ResourceState
HardwareDriver <|-- StationBeamDriver
HealthMonitor <|-- MutableHealthMonitor
PowerManager <|-- StationPowerManager
HardwareDriver <|-- OnOffHardwareDriver
SKABaseDevice <|-- MccsDevice
SKABaseDevice <|-- MccsGroupDevice
HardwareDriver <|-- HardwareSimulator
SKAObsDevice <|-- MccsStation
HardwareDriver <|-- AntennaTileProxy
OnOffHardwareDriver <|-- AntennaAPIUProxy
ResourceManager <|-- StationBeamsResourceManager
SKATelState <|-- MccsTelState
ResourceManager <|-- StationsResourceManager
HardwareHealthEvaluator <|-- StationBeamHealthEvaluator
HealthModel <|-- MutableHealthModel
MccsDevice <|-- MccsTransientBuffer
HardwareFactory <|-- AntennaHardwareFactory
SKABaseDevice <|-- MccsAntenna
HardwareFactory <|-- StationBeamHardwareFactory
MccsStationBeam -- StationBeamHardwareManager
MccsStationBeam -- EventManager
AntennaHardwareDriver -- AntennaAPIUProxy
AntennaHardwareDriver -- AntennaTileProxy
AntennaHardwareManager -- AntennaHardwareHealthEvaluator
MccsSubarray -- TransientBufferManager
MccsSubarray -- EventManager
StationBeamHardwareManager -- StationBeamHardwareFactory
StationBeamHardwareManager -- StationBeamHealthEvaluator
MccsStation -- EventManager
MccsStation -- StationPowerManager
DeviceEventManager -- EventSubscriptionHandler
MccsTelState -- EventManager
MutableHealthModel -- MutableHealthMonitor
EventManager -- DeviceEventManager
MccsTransientBuffer -- EventManager
HealthMonitor -- DeviceHealthMonitor
HealthModel -- DeviceHealthRollupPolicy
HealthModel -- HealthMonitor
MccsAntenna -- EventManager
StationBeamHardwareFactory -- StationBeamDriver
@enduml
