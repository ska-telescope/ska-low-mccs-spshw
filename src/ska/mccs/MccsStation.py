# -*- coding: utf-8 -*-
#
# This file is part of the MccsStation project
#
#
#
# Distributed under the terms of the GPL license.
# See LICENSE.txt for more info.

""" MCCS Station

MccsStation is the Tango device class for the MCCS Station prototype.
"""

# PyTango imports
import tango
from tango import DebugIt
from tango.server import run
from tango.server import Device, DeviceMeta
from tango.server import attribute, command
from tango.server import device_property
from tango import AttrQuality, DispLevel, DevState
from tango import AttrWriteType, PipeWriteType
import enum
#from SKAObsDevice import SKAObsDevice
# Additional import
# PROTECTED REGION ID(MccsStation.additionnal_import) ENABLED START #
#REMEMBER TO COMMENT OUT "from SKAObsDevice import SKAObsDevice"
from ska.base import SKAObsDevice
from ska.base.control_model import (HealthState, AdminMode, ObsState,
                                    ObsMode, ControlMode, SimulationMode,
                                    TestMode, LoggingLevel)
# PROTECTED REGION END #    //  MccsStation.additionnal_import

__all__ = ["MccsStation", "main"]


#class AdminMode(enum.IntEnum):
#    """Python enumerated type for AdminMode attribute."""
#
#
#class ControlMode(enum.IntEnum):
#    """Python enumerated type for ControlMode attribute."""
#
#
#class HealthState(enum.IntEnum):
#    """Python enumerated type for HealthState attribute."""
#
#
#class LoggingLevel(enum.IntEnum):
#    """Python enumerated type for LoggingLevel attribute."""
#
#
#class ObsMode(enum.IntEnum):
#    """Python enumerated type for ObsMode attribute."""
#
#
#class ObsState(enum.IntEnum):
#    """Python enumerated type for ObsState attribute."""
#
#
#class SimulationMode(enum.IntEnum):
#    """Python enumerated type for SimulationMode attribute."""
#
#
#class TestMode(enum.IntEnum):
#    """Python enumerated type for TestMode attribute."""
#

class MccsStation(SKAObsDevice):
    """
    MccsStation is the Tango device class for the MCCS Station prototype.

    **Properties:**

    - Device Property
        skaLevel
            - Indication of the importance of the device in the SKA hierarchy, to support drill-down navigation
            - Type:'DevShort'
    """
    __metaclass__ = DeviceMeta
    # PROTECTED REGION ID(MccsStation.class_variable) ENABLED START #
    # PROTECTED REGION END #    //  MccsStation.class_variable

    # -----------------
    # Device Properties
    # -----------------







    skaLevel = device_property(
        dtype='DevShort', default_value=3
    )

    # ----------
    # Attributes
    # ----------














    subarrayId = attribute(
        dtype='DevLong',
        format="%i",
        polling_period=1000,
        max_value=16,
        min_value=0,
        doc="The ID of the Subarray to which this Station is allocated",
    )

    transientBufferFQDN = attribute(
        dtype='DevString',
        format="%s",
        polling_period=1000,
        doc="The fully-qualified device name of the 'transient buffer' TANGO device created by the Station",
    )

    isCalibrated = attribute(
        dtype='DevBoolean',
        polling_period=1000,
        max_value=1,
        min_value=0,
        max_alarm=1,
        doc="Defined whether the calibration cycle was successful (converged, good phase centres)",
    )

    isConfigured = attribute(
        dtype='DevBoolean',
        polling_period=1000,
        max_value=1,
        min_value=0,
        doc="True when the Station is configured, False when the Station is unconfigured or in the process of reconfiguring.",
    )

    calibrationJobId = attribute(
        dtype='DevLong',
        format="%i",
        polling_period=1000,
        doc="The job ID for calibration jobs submitted by this Station",
    )

    daqJobId = attribute(
        dtype='DevLong',
        format="%i",
        polling_period=1000,
        doc="The job ID for DAQ jobs submitted by this Station.",
    )

    dataDirectory = attribute(
        dtype='DevString',
        format="%s",
        polling_period=1000,
        doc="Parent directory for all files generated by the station.",
    )




    tileFQDNs = attribute(
        dtype=('DevString',),
        max_dim_x=16,
        format="%s",
        polling_period=1000,
        doc="Array of fully-qualified device names of the Tile devices that are associated with the Station",
    )

    beamFQDNs = attribute(
        dtype=('DevString',),
        max_dim_x=8,
        format="%s",
        polling_period=1000,
        doc="Array of full-qualified device names for the Station Beams associated with this Station",
    )

    delayCentre = attribute(
        dtype=('DevFloat',),
        access=AttrWriteType.READ_WRITE,
        max_dim_x=2,
        polling_period=1000,
        doc="WGS84 position of the delay centre of the Station.\n\ntodo: WGS84 is a datum. What is the coordinate system?: Latitude and longitude? Or is it SUTM50 eastings and northings? Either way, do we need to allow for elevation too?",
    )

    calibrationCoefficients = attribute(
        dtype=('DevFloat',),
        max_dim_x=512,
        polling_period=1000,
        doc="Latest calibration coefficients for the station (split per channel/antenna)\n\ntodo: How big should this array be? Gain and offset per antenna per channel. This station can have up to 16 tiles of up to 16 antennas, so that is 2 x 16 x 16 = 512 coefficients per channel. But how many channels?",
    )

    # ---------------
    # General methods
    # ---------------

    def init_device(self):
        """
        Initialises the attributes and properties of the MccsStation.
        """
        SKAObsDevice.init_device(self)
        self.set_change_event("subarrayId", True, True)
        self.set_archive_event("subarrayId", True, True)
        self.set_change_event("transientBufferFQDN", True, False)
        self.set_archive_event("transientBufferFQDN", True, False)
        self.set_change_event("isCalibrated", True, True)
        self.set_archive_event("isCalibrated", True, True)
        self.set_change_event("isConfigured", True, True)
        self.set_archive_event("isConfigured", True, True)
        self.set_change_event("tileFQDNs", True, True)
        self.set_archive_event("tileFQDNs", True, True)
        self.set_change_event("beamFQDNs", True, True)
        self.set_archive_event("beamFQDNs", True, True)
        # PROTECTED REGION ID(MccsStation.init_device) ENABLED START #
        # PROTECTED REGION END #    //  MccsStation.init_device

    def always_executed_hook(self):
        """
        Method always executed before any TANGO command is executed.
        """
        # PROTECTED REGION ID(MccsStation.always_executed_hook) ENABLED START #
        # PROTECTED REGION END #    //  MccsStation.always_executed_hook

    def delete_device(self):
        """
        Hook to delete resources allocated in init_device.

        This method allows for any memory or other resources allocated in the
        init_device method to be released.  This method is called by the device
        destructor and by the device Init command.
        """
        # PROTECTED REGION ID(MccsStation.delete_device) ENABLED START #
        # PROTECTED REGION END #    //  MccsStation.delete_device
    # ------------------
    # Attributes methods
    # ------------------

    def read_subarrayId(self):
        # PROTECTED REGION ID(MccsStation.subarrayId_read) ENABLED START #
        """
        Return the subarrayId attribute.
        """
        return 0
        # PROTECTED REGION END #    //  MccsStation.subarrayId_read

    def read_transientBufferFQDN(self):
        # PROTECTED REGION ID(MccsStation.transientBufferFQDN_read) ENABLED START #
        """
        Return the transientBufferFQDN attribute.
        """
        return ''
        # PROTECTED REGION END #    //  MccsStation.transientBufferFQDN_read

    def read_isCalibrated(self):
        # PROTECTED REGION ID(MccsStation.isCalibrated_read) ENABLED START #
        """
        Return the isCalibrated attribute.
        """
        return False
        # PROTECTED REGION END #    //  MccsStation.isCalibrated_read

    def read_isConfigured(self):
        # PROTECTED REGION ID(MccsStation.isConfigured_read) ENABLED START #
        """
        Return the isConfigured attribute.
        """
        return False
        # PROTECTED REGION END #    //  MccsStation.isConfigured_read

    def read_calibrationJobId(self):
        # PROTECTED REGION ID(MccsStation.calibrationJobId_read) ENABLED START #
        """
        Return the calibrationJobId attribute.
        """
        return 0
        # PROTECTED REGION END #    //  MccsStation.calibrationJobId_read

    def read_daqJobId(self):
        # PROTECTED REGION ID(MccsStation.daqJobId_read) ENABLED START #
        """
        Return the daqJobId attribute.
        """
        return 0
        # PROTECTED REGION END #    //  MccsStation.daqJobId_read

    def read_dataDirectory(self):
        # PROTECTED REGION ID(MccsStation.dataDirectory_read) ENABLED START #
        """
        Return the dataDirectory attribute.
        """
        return ''
        # PROTECTED REGION END #    //  MccsStation.dataDirectory_read

    def read_tileFQDNs(self):
        # PROTECTED REGION ID(MccsStation.tileFQDNs_read) ENABLED START #
        """
        Return the tileFQDNs attribute.
        """
        return ('',)
        # PROTECTED REGION END #    //  MccsStation.tileFQDNs_read

    def read_beamFQDNs(self):
        # PROTECTED REGION ID(MccsStation.beamFQDNs_read) ENABLED START #
        """
        Return the beamFQDNs attribute.
        """
        return ('',)
        # PROTECTED REGION END #    //  MccsStation.beamFQDNs_read

    def read_delayCentre(self):
        # PROTECTED REGION ID(MccsStation.delayCentre_read) ENABLED START #
        """
        Return the delayCentre attribute.
        """
        return (0.0,)
        # PROTECTED REGION END #    //  MccsStation.delayCentre_read

    def write_delayCentre(self, value):
        # PROTECTED REGION ID(MccsStation.delayCentre_write) ENABLED START #
        """
        Set the delayCentre attribute.
        """
        pass
        # PROTECTED REGION END #    //  MccsStation.delayCentre_write

    def read_calibrationCoefficients(self):
        # PROTECTED REGION ID(MccsStation.calibrationCoefficients_read) ENABLED START #
        """
        Return the calibrationCoefficients attribute.
        """
        return (0.0,)
        # PROTECTED REGION END #    //  MccsStation.calibrationCoefficients_read

    # --------
    # Commands
    # --------

# ----------
# Run server
# ----------


def main(args=None, **kwargs):
    """
    Main function of the MccsStation module.
    """
    # PROTECTED REGION ID(MccsStation.main) ENABLED START #
    return run((MccsStation,), args=args, **kwargs)
    # PROTECTED REGION END #    //  MccsStation.main


if __name__ == '__main__':
    main()

