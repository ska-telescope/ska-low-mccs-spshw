import logging
from typing import Any, Callable, Hashable, Optional, Type, Union, cast

from tango import DevState
from tango.server import Device

from ska_tango_base.base.op_state_model import OpStateModel
from ska_tango_base.commands import CompletionCommand, ResultCode, ResponseCommand, StateModelCommand
from ska_tango_base.control_model import PowerMode


class BaseComponentManager:
    def __init__(
        self: BaseComponentManager,
        op_state_model: OpStateModel | None,
        *args: Any,
        **kwargs: Any,
    ): ...
    def start_communicating(self: BaseComponentManager) -> None: ...
    def stop_communicating(self: BaseComponentManager) -> None: ...
    @property
    def is_communicating(self: BaseComponentManager) -> bool: ...
    @property
    def power_mode(self: BaseComponentManager) -> Optional[PowerMode]: ...
    @property
    def faulty(self: BaseComponentManager) -> Optional[bool]: ...
    def off(self: BaseComponentManager) -> ResultCode | None: ...
    def standby(self: BaseComponentManager) -> ResultCode | None: ...
    def on(self: BaseComponentManager) -> ResultCode | None: ...
    def reset(self: BaseComponentManager) -> ResultCode | None: ...
    def component_power_mode_changed(
        self: BaseComponentManager, power_mode: PowerMode
    ) -> None: ...
    def component_fault(self: BaseComponentManager) -> None: ...


class SKABaseDevice(Device):
    def _init_state_model(self: SKABaseDevice) -> None: ...

    class InitCommand(ResponseCommand, CompletionCommand):
        def do(  # type: ignore[override]
            self: SKABaseDevice.InitCommand
        ) -> tuple[ResultCode, str]: ...

    class OnCommand(StateModelCommand, ResponseCommand):
        def __init__(self: SKABaseDevice.OnCommand, target: object, op_state_model: OpStateModel, logger: Optional[logging.Logger]=None) -> None: ...
        def do(  # type: ignore[override]
            self: SKABaseDevice.OnCommand
        ) -> tuple[ResultCode, str]: ...

    def is_On_allowed(self: SKABaseDevice) -> bool: ...
    def On(self: SKABaseDevice) -> tuple[list[ResultCode], list[Optional[str]]]: ...
