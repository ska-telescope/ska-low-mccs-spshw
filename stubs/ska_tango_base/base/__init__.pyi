# -*- coding: utf-8 -*-
#
# This file is part of the SKA Low MCCS project
#
#
# Distributed under the terms of the BSD 3-clause new license.
# See LICENSE for more info.
import logging
from typing import Any, Callable, List, Optional, Tuple


# SKA specific imports

import ska_ser_logging  # type: ignore[import]

# Tango imports
import tango
from tango import DebugIt, DevState
from tango.server import Device

from ska_tango_base.base.component_manager import BaseComponentManager
from ska_tango_base.base.op_state_model import OpStateModel
from ska_tango_base.commands import ResultCode, _BaseCommand, DeviceInitCommand
from ska_tango_base.control_model import LoggingLevel, PowerState
from ska_tango_base.commands import (
    DeviceInitCommand,
    FastCommand,
    ResultCode,
    SlowCommand,
    SubmittedSlowCommand,
)
from ska_tango_base.executor import TaskStatus

DevVarLongStringArrayType = Tuple[List[ResultCode], List[Optional[str]]]


class CommandTracker:
    def __init__(
        self: CommandTracker,
        queue_changed_callback: Callable[[list[tuple[str, str]]], None],
        status_changed_callback: Callable[[list[tuple[str, TaskStatus]]], None],
        progress_changed_callback: Callable[[list[tuple[str, int]]], None],
        result_callback: Callable[[str, ResultCode], None],
        exception_callback: Optional[Callable[[str, Exception], None]] = None,
        removal_time: float = 10.0,
    ) -> None: ...
    def new_command(
        self: CommandTracker,
        command_name: str,
        completed_callback: Optional[Callable[[], None]] = None,
    ) -> str: ...
    def _schedule_removal(self: CommandTracker, command_id: str) -> None: ...
    def update_command_info(
        self: CommandTracker,
        command_id: str,
        status: Optional[TaskStatus] = None,
        progress: Optional[int] = None,
        result: Optional[ResultCode] = None,
        exception: Optional[Exception] = None,
    ) -> None: ...
    def _commands_by_keyword(
        self: CommandTracker, keyword: str
    ) -> list[tuple[str, Any]]: ...
    @property
    def commands_in_queue(self: CommandTracker) -> list[tuple[str, str]]: ...
    @property
    def command_statuses(self: CommandTracker) -> list[tuple[str, TaskStatus]]: ...
    @property
    def command_progresses(self: CommandTracker) -> list[tuple[str, int]]: ...
    @property
    def command_result(self: CommandTracker) -> Optional[tuple[str, ResultCode]]: ...
    @property
    def command_exception(self: CommandTracker) -> Optional[tuple[str, Exception]]: ...
    def get_command_status(self: CommandTracker, command_id: str) -> TaskStatus: ...


class SKABaseDevice(Device):
    def _init_state_model(self: SKABaseDevice) -> None: ...
    def _init_logging(self: SKABaseDevice) -> None: ...
    def init_device(self: SKABaseDevice) -> None: ...

    class InitCommand(DeviceInitCommand):
        def do(self: SKABaseDevice.InitCommand) -> tuple[ResultCode, str]:  # type: ignore[override]
            ...

    def set_logging_level(self: SKABaseDevice, value: LoggingLevel) -> None: ...
    def set_logging_targets(self: SKABaseDevice, targets: list[str]) -> None: ...
    def create_component_manager(self: SKABaseDevice) -> BaseComponentManager: ...
    def register_command_object(
        self: SKABaseDevice, command_name: str, command_object: FastCommand | SlowCommand
    ) -> None: ...
    def get_command_object(self: SKABaseDevice, command_name: str) -> FastCommand | SlowCommand: ...
    def init_command_objects(self: SKABaseDevice) -> None: ...

    def is_Reset_allowed(self: SKABaseDevice) -> bool: ...
    def Reset(self: SKABaseDevice) -> DevVarLongStringArrayType: ...
    def is_Standby_allowed(self: SKABaseDevice) -> bool: ...
    def Standby(self: SKABaseDevice) -> DevVarLongStringArrayType: ...
    def is_Off_allowed(self: SKABaseDevice) -> bool: ...
    def Off(self: SKABaseDevice) -> DevVarLongStringArrayType: ...
    def is_On_allowed(self: SKABaseDevice) -> bool: ...
    def On(self: SKABaseDevice) -> DevVarLongStringArrayType: ...
    class AbortCommandsCommand(SlowCommand):
        def __init__(
            self: SKABaseDevice.AbortCommandsCommand,
            component_manager: BaseComponentManager,
            logger: Optional[logging.Logger] = None,
        ) -> None:
             self._component_manager = component_manager
             ...
        def do(  # type: ignore[override]
            self: SKABaseDevice.AbortCommandsCommand,
        ) -> tuple[ResultCode, str]:
            ...
    def AbortCommands(self: SKABaseDevice) -> DevVarLongStringArrayType: ...
    def DebugDevice(self: SKABaseDevice) -> int: ...
    def set_state(self: SKABaseDevice, state: DevState) -> None: ...
    def set_status(self: SKABaseDevice, status: str) -> None: ...
    def push_change_event(self: SKABaseDevice, name: str, value: Any = None) -> None: ...
    def push_archive_event(self: SKABaseDevice, name: str, value: Any = None) -> None: ...
    def PushChanges(self: SKABaseDevice) -> None: ...
    