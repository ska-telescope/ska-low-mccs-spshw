import logging
from typing import Any, Callable, Hashable, Optional, Type, Union, cast

from tango import DevState
from ska_tango_base.commands import ResultCode
from ska_tango_base.control_model import PowerMode

class BaseComponentManager:
    def __init__(
        self: BaseComponentManager,
        op_state_model: OpStateModel | None,
        *args: Any,
        **kwargs: Any,
    ): ...
    def start_communicating(self: BaseComponentManager) -> None: ...
    def stop_communicating(self: BaseComponentManager) -> None: ...
    @property
    def is_communicating(self: BaseComponentManager) -> bool: ...
    @property
    def power_mode(self: BaseComponentManager) -> Optional[PowerMode]: ...
    @property
    def faulty(self: BaseComponentManager) -> Optional[bool]: ...
    def off(self: BaseComponentManager) -> ResultCode | None: ...
    def standby(self: BaseComponentManager) -> ResultCode | None: ...
    def on(self: BaseComponentManager) -> ResultCode | None: ...
    def reset(self: BaseComponentManager) -> ResultCode | None: ...
    def component_power_mode_changed(
        self: BaseComponentManager, power_mode: PowerMode
    ) -> None: ...
    def component_fault(self: BaseComponentManager) -> None: ...

class OpStateModel:
    def __init__(
        self: OpStateModel,
        logger: logging.Logger,
        callback: Callable[[DevState], None],
    ): ...
    @property
    def op_state(self: OpStateModel) -> DevState: ...
    def _op_state_changed(self: OpStateModel, machine_state: str) -> None: ...
    def is_action_allowed(
        self: OpStateModel,
        action: str,
        raise_if_disallowed: bool = False,
    ) -> bool: ...
    def perform_action(self: OpStateModel, action: str) -> None: ...
    def _straight_to_state(self: OpStateModel, op_state_name: str) -> None: ...

class SKABaseDevice: ...
