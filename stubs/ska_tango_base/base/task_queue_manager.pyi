# -*- coding: utf-8 -*-
#
# This file is part of the SKA Low MCCS project
#
#
# Distributed under the terms of the BSD 3-clause new license.
# See LICENSE for more info.
import logging
import enum
from typing import Any, Optional, Callable, Union, Tuple, Type
from ska_tango_base.commands import ResultCode, BaseCommand

from typing import Callable

class TaskResult:
    def __init__(
        self: TaskResult,
        result_code: ResultCode,
        task_result: str,
        unique_id: str
    ) -> None: ...

class TaskState(enum.IntEnum): ...

class QueueManager:
    def __init__(
        self: QueueManager,
        max_queue_size: int = 0,
        queue_fetch_timeout: float = 0.1,
        num_workers: int = 0,
        logger: Optional[logging.Logger] = None,
        push_change_event: Optional[Callable] = None,
    ):
        self._task_result: Tuple[str, str, str]
        ...

    @property
    def queue_full(self: QueueManager) -> bool: ...
    @property
    def task_result(self: QueueManager) -> Union[Tuple[str, str, str], Tuple[()]]: ...
    @property
    def task_ids_in_queue(self: QueueManager) -> Tuple[str,]: ...
    @property
    def tasks_in_queue(self: QueueManager) -> Tuple[str,]: ...
    @property
    def task_status(self: QueueManager) -> Tuple[str,]: ...
    @property
    def task_progress(self: QueueManager) -> Tuple[str,]: ...
    @property
    def is_aborting(self: QueueManager) -> bool: ...

    def enqueue_task(self: QueueManager, task: BaseCommand, argin: Optional[Any]) -> Tuple[str, ResultCode]: ...
    def result_callback(self: QueueManager, task_result: TaskResult) -> None: ...
    def update_task_state_callback(self: QueueManager, unique_id: str, status: str) -> None: ...
    def update_progress_callback(self: QueueManager) -> None: ...
    def _on_property_change(self: QueueManager, property_name: str, property_value: Any) -> None: ...
    def abort_tasks(self: QueueManager) -> None: ...
    def resume_tasks(self: QueueManager) -> None: ...
    def stop_tasks(self: QueueManager) -> None: ...
    def get_task_state(self: QueueManager, unique_id: str) -> TaskState: ...
    def _log_message(self: QueueManager, message: str, level: str) -> None: ...
    def __len__(self: QueueManager) -> int: ...
    def __bool__(self: QueueManager) -> bool: ...

    @classmethod
    def generate_unique_id(cls: Type[QueueManager], task_name: Any) -> str: ...
