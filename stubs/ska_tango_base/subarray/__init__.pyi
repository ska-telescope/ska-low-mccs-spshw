# -*- coding: utf-8 -*-
#
# This file is part of the SKA Low MCCS project
#
#
# Distributed under the terms of the BSD 3-clause new license.
# See LICENSE for more info.
import logging
from typing import Any, Callable, Hashable, List, Optional, Tuple

from ska_tango_base.base.component_manager import BaseComponentManager
from ska_tango_base.base.base_device import _CommandTracker # type: ignore[import]
from ska_tango_base.base.op_state_model import OpStateModel
from ska_tango_base.commands import DeviceInitCommand, ResultCode, SlowCommand, FastCommand
from ska_tango_base.obs import SKAObsDevice
from ska_tango_base.subarray.subarray_obs_state_model import SubarrayObsStateModel


class SKASubarray(SKAObsDevice):

    class InitCommand(SKAObsDevice.InitCommand):
        def do( # type: ignore[override]
            self: SKASubarray.InitCommand
        ) -> tuple[ResultCode, str]: ...

    class AbortCommand(SlowCommand):
        def __init__(self: SKASubarray.AbortCommand, command_tracker: _CommandTracker, 
        component_manager: BaseComponentManager, callback: Callable, logger: Optional[logging.Logger]=None) -> None: ...
        def do(self: SKASubarray.AbortCommand) -> tuple[ResultCode, str]: # type: ignore[override]
            ...

    def is_AssignResources_allowed(self: SKAObsDevice) -> bool: ...
    def AssignResources(self: SKAObsDevice, argin: str) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_ReleaseResources_allowed(self: SKAObsDevice) -> bool: ...
    def ReleaseResources(self: SKAObsDevice, argin: str) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_ReleaseAllResources_allowed(self: SKAObsDevice) -> bool: ...
    def ReleaseAllResources(self: SKAObsDevice) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_Configure_allowed(self: SKAObsDevice) -> bool: ...
    def Configure(self: SKAObsDevice, argin: str) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_Scan_allowed(self: SKAObsDevice) -> bool: ...
    def Scan(self: SKAObsDevice, argin: str) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_EndScan_allowed(self: SKAObsDevice) -> bool: ...
    def EndScan(self: SKAObsDevice) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_End_allowed(self: SKAObsDevice) -> bool: ...
    def End(self: SKAObsDevice) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_Abort_allowed(self: SKAObsDevice) -> bool: ...
    def Abort(self: SKAObsDevice) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_ObsReset_allowed(self: SKAObsDevice) -> bool: ...
    def ObsReset(self: SKAObsDevice) -> Tuple[List[ResultCode], List[Optional[str]]]: ...
    def is_Restart_allowed(self: SKAObsDevice) -> bool: ...
    def Restart(self: SKAObsDevice) -> Tuple[List[ResultCode], List[Optional[str]]]: ...


class SubarrayComponentManager(BaseComponentManager):
    def __init__(
        self: SubarrayComponentManager,
        op_state_model: OpStateModel,
        obs_state_model: SubarrayObsStateModel,
    ) -> None: ...

    def assign(
        self: SubarrayComponentManager,
        resources: list[Any]
    ) -> None: ...

    def release(
        self: SubarrayComponentManager,
        resources: list[Any]
    ) -> None: ...

    def release_all(self: SubarrayComponentManager) -> None: ...

    def configure(
        self: SubarrayComponentManager,
        configuration: dict[Hashable, Any],
    ) -> None: ...

    def deconfigure(self: SubarrayComponentManager) -> None: ...

    def scan(
        self: SubarrayComponentManager,
        *args: Any,
        **kwargs: Any
    ) -> None: ...

    def end_scan(self: SubarrayComponentManager) -> None: ...

    def abort(self: SubarrayComponentManager) -> None: ...

    def obsreset(self: SubarrayComponentManager) -> None: ...

    def restart(self: SubarrayComponentManager) -> None: ...

    @property
    def assigned_resources(self: SubarrayComponentManager) -> set[Any]: ...

    @property
    def configured_capabilities(self: SubarrayComponentManager) -> list[str]: ...

    def component_resourced(self: SubarrayComponentManager, resourced: bool) -> None: ...

    def component_configured(self: SubarrayComponentManager, configured: bool) -> None: ...

    def component_scanning(self: SubarrayComponentManager, scanning: bool) -> None: ...

    def component_obsfault(self: SubarrayComponentManager) -> None: ...
